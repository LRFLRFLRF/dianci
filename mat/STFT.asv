clc;
clear;

yuan_data_path = 'E:\Desktop\dianci\Python_code\mat\';  %106to114_oneDim 文件路径
yuan_data_name = '107to113_oneDim';

%% 加载原始波形
dat = load([yuan_data_path, yuan_data_name, '.mat']);   
fieldname = fieldnames(dat);   %获取字段名
name = fieldname{1};
data_yuan = getfield(dat, name);    %根据字段名读取数据

data = data_yuan - mean(data_yuan);   %去除直流分量

%% STFT
len = length(data);

%如果window为一个整数，x将被分成window长的段，每段使用Hamming窗函数加窗。
window = 10*24/3;    %窗口数量   

%它必须为一个小于window或length(window)的整数。
%其意思为两个相邻窗不是尾接着头的，而是两个窗有交集，有重叠的部分。
% 重叠为0，window等于10*24时，正好时间轴7格，一格代表一天   若重叠率为0.5  则时间轴14格
noverlap = window*0;    %每一段的重叠样本数,


f_len = 10;     %频率轴分几份
f = linspace(0, 1e10, f_len);   %第二参数为频率轴显示范围

%离散傅里叶点数
nfft = window;

%采样频率
fs = 10*24; %一天折合成1s   采样频率 10*24


[s, f, t] = spectrogram(data, window, noverlap, nfft, fs);
figure('color','w');

%% 功率谱密度 db/hz
% imagesc(t, f./(fs/2), 10*log10(abs(s)/len));   %功率谱密度
% title('综合电场强度序列功率谱密度图','FontSize',18);
% xlabel('天数','FontSize',18); ylabel('归一化频率','FontSize',18);
% colorbar;
% ylabel(colorbar,'功率谱密度 [dB/HZ]','FontSize',18);
% colormap(jet);


%% 按全局峰值做幅度归一化
imagesc(t, f./(fs/2), 10*log10(abs(s)/max(max(abs(s)))));   %频谱幅度归一化
%surf(t, f./(fs/2), 10*log10(abs(s)/max(max(abs(s)))));
title('综合电场强度序列频谱图','FontSize',18);
xlabel('天数','FontSize',18); ylabel('归一化频率','FontSize',18);
colorbar;
ylabel(colorbar,'全局幅度最大值归一化幅度 [dB]','FontSize',18);
colormap(jet);

    
%% 按单日峰值做幅度归一化
% max_col = repmat(max(abs(s),[],1), size(s,1), 1);
% s_1 = abs(s)./max_col;
% imagesc(t, f./(fs/2), 10*log10(s_1) );   %频谱幅度归一化
% title('综合电场强度序列频谱图','FontSize',18);
% xlabel('天数','FontSize',18); ylabel('归一化频率','FontSize',18);
% colorbar;
% ylabel(colorbar,'单日幅度最大值归一化幅度 [dB]','FontSize',18);
% colormap(jet);

%% 显示[上下午]标签文字
yLabels = {'0-8点', '8-16点', '16-24点'};  % 待添加的标签
lenlab = length(yLabels);
for i = 0 : length(yLabels)*7-1
    text(1/lenlab * i+0.05, 1-0.025, yLabels(mod(i,3)+1));   % 用文本的方式添加，位置可以自定义
end


%% 频率特征提取
norm_freq_mat = repmat(f./(fs/2), 1, size(s, 2));%归一化频率矩阵

%平均频率 MF
MF = mean(abs(s), 1);

%重心频率 FC
numer = sum(norm_freq_mat.*abs(s));
denomin = sum(abs(s));
FC = numer./denomin;

%均方频率MSF
num





